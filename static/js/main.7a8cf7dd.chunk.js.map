{"version":3,"sources":["Pagination.tsx","App.tsx","index.tsx"],"names":["perPageRange","Pagination","useState","total","setTotal","perPage","setPerPage","page","setPage","lastPage","Math","ceil","firstPage","nextPage","previousPage","setDotsBefore","setDotsAfter","setPrevPage","setNextPage","isFirtsPage","isLastPage","isVisibleLastPage","className","type","onClick","disabled","e","currentTarget","textContent","htmlFor","name","id","value","onChange","event","target","defaultValue","map","item","App","ReactDOM","render","document","getElementById"],"mappings":"0LAEMA,EAAe,CAAC,EAAG,EAAG,GAAI,IAEnBC,EAAuB,WAClC,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwBJ,mBAAS,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACMC,EAAWC,KAAKC,KAAKR,EAAQE,GAC7BO,EAAYL,EAAOA,EAAO,EAC1BM,EAAWN,EAAO,EAClBO,EAAeP,EAAO,EACtBQ,EAAgBR,EAAO,EACvBS,EAAeT,EAAOE,EAAW,EACjCQ,EAAcV,EAAO,EACrBW,EAAcX,EAAOE,EAAW,EAChCU,EAAcZ,EAAO,EACrBa,EAAab,EAAOE,EACpBY,EAAoBd,IAASE,EA8BnC,OACE,qCACE,sBAAKa,UAAU,iBAAf,UACE,wBACEC,KAAK,SACLC,QAjCW,WACjBhB,EAAQM,IAiCFW,SAAUlB,GAAQ,EAClBe,UAAU,SAJZ,SAME,mDAGDH,GACC,wBACEI,KAAK,SACLC,QAAS,SAAAE,GACHA,EAAEC,cAAcC,aAClBpB,GAASkB,EAAEC,cAAcC,cAG7BN,UAAU,SAPZ,SASGV,IAIJK,GACC,qCACGF,GACC,sBAAMO,UAAU,OAAhB,iBAEF,wBACEC,KAAK,SACLC,QAAS,SAAAE,GACHA,EAAEC,cAAcC,aAClBpB,GAASkB,EAAEC,cAAcC,cAG7BN,UAAU,SAPZ,SASGR,OAKP,wBAAQS,KAAK,SAASD,UAAU,gBAAhC,SACGf,IAGFW,GACC,qCACE,wBACEK,KAAK,SACLC,QAAS,SAAAE,GACHA,EAAEC,cAAcC,aAClBpB,GAASkB,EAAEC,cAAcC,cAG7BN,UAAU,SAPZ,SASGT,IAEFG,GACC,sBAAMM,UAAU,OAAhB,oBAKLD,GACC,wBACEE,KAAK,SACLC,QAAS,SAAAE,GACHA,EAAEC,cAAcC,aAClBpB,GAASkB,EAAEC,cAAcC,cAG7BN,UAAU,SAPZ,SASGb,IAIL,wBACEc,KAAK,SACLC,QA5GO,WACbhB,EAAQK,IA4GFY,SAAUlB,GAAQE,EAClBa,UAAU,SAJZ,SAME,iDAIJ,uBAEA,wBAAOO,QAAQ,QAAQP,UAAU,QAAjC,UACE,sDACA,uBACEC,KAAK,SACLO,KAAK,QACLC,GAAG,QACHC,MAAO7B,EACP8B,SAzHc,SAACC,GACrB9B,GAAU8B,EAAMC,OAAOH,OACvBxB,EAAQ,SA2HN,uBAEA,wBAAOqB,QAAQ,aAAf,6CAEE,wBACEC,KAAK,aACLC,GAAG,aACHE,SA/HgB,SAACC,GACvB5B,GAAY4B,EAAMC,OAAOH,OACzBxB,EAAQ,IA8HF4B,aAAc/B,EAJhB,SAMGL,EAAaqC,KAAI,SAAAC,GAAI,OACpB,wBAEEN,MAAOM,EAFT,SAIGA,GAHIA,WASb,uBA7HF,0BA8HsB7B,GACpB,uBACA,4DA3ImBF,EAAOF,GAAWA,EAAU,GA2I/C,cAxIEE,EAAOF,GAAWF,EACbA,EAGFI,EAAOF,EAoIZ,eACwDF,EADxD,aAGA,uBAnIF,iBAoIaA,GACX,uBArIF,mBAsIeE,GACb,uBACCc,GACC,kDAAmBL,KAzIvB,gBA2IYP,GACV,uBACCa,GACC,kDAAmBP,KA9IvB,6BAgJyBN,EAhJzB,oBAgJyCF,OCtL9BkC,G,MAPO,kBACpB,qCACE,4CACA,cAAC,EAAD,SCJJC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7a8cf7dd.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst perPageRange = [3, 5, 10, 20];\n\nexport const Pagination: React.FC = () => {\n  const [total, setTotal] = useState(42);\n  const [perPage, setPerPage] = useState(5);\n  const [page, setPage] = useState(1);\n  const lastPage = Math.ceil(total / perPage);\n  const firstPage = page - page + 1;\n  const nextPage = page + 1;\n  const previousPage = page - 1;\n  const setDotsBefore = page > 3;\n  const setDotsAfter = page < lastPage - 2;\n  const setPrevPage = page > 2;\n  const setNextPage = page < lastPage - 1;\n  const isFirtsPage = page > 1;\n  const isLastPage = page < lastPage;\n  const isVisibleLastPage = page !== lastPage;\n\n  const onPrevious = () => {\n    setPage(previousPage);\n  };\n\n  const onNext = () => {\n    setPage(nextPage);\n  };\n\n  const onTotalChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTotal(+event.target.value);\n    setPage(1);\n  };\n\n  const onPerPageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(+event.target.value);\n    setPage(1);\n  };\n\n  const fromItem = () => page * perPage - (perPage - 1);\n\n  const toItem = () => {\n    if (page * perPage >= total) {\n      return total;\n    }\n\n    return page * perPage;\n  };\n\n  return (\n    <>\n      <div className=\"button__family\">\n        <button\n          type=\"button\"\n          onClick={onPrevious}\n          disabled={page <= 1}\n          className=\"button\"\n        >\n          <span>Previous Page</span>\n        </button>\n\n        {isFirtsPage && (\n          <button\n            type=\"button\"\n            onClick={e => {\n              if (e.currentTarget.textContent) {\n                setPage(+e.currentTarget.textContent);\n              }\n            }}\n            className=\"button\"\n          >\n            {firstPage}\n          </button>\n        )}\n\n        {setPrevPage && (\n          <>\n            {setDotsBefore && (\n              <span className=\"dots\">...</span>\n            )}\n            <button\n              type=\"button\"\n              onClick={e => {\n                if (e.currentTarget.textContent) {\n                  setPage(+e.currentTarget.textContent);\n                }\n              }}\n              className=\"button\"\n            >\n              {previousPage}\n            </button>\n          </>\n        )}\n\n        <button type=\"button\" className=\"active button\">\n          {page}\n        </button>\n\n        {setNextPage && (\n          <>\n            <button\n              type=\"button\"\n              onClick={e => {\n                if (e.currentTarget.textContent) {\n                  setPage(+e.currentTarget.textContent);\n                }\n              }}\n              className=\"button\"\n            >\n              {nextPage}\n            </button>\n            {setDotsAfter && (\n              <span className=\"dots\">...</span>\n            )}\n          </>\n        )}\n\n        {isVisibleLastPage && (\n          <button\n            type=\"button\"\n            onClick={e => {\n              if (e.currentTarget.textContent) {\n                setPage(+e.currentTarget.textContent);\n              }\n            }}\n            className=\"button\"\n          >\n            {lastPage}\n          </button>\n        )}\n\n        <button\n          type=\"button\"\n          onClick={onNext}\n          disabled={page >= lastPage}\n          className=\"button\"\n        >\n          <span>nextPage</span>\n        </button>\n      </div>\n\n      <hr />\n\n      <label htmlFor=\"total\" className=\"total\">\n        <span>Set amount items: </span>\n        <input\n          type=\"number\"\n          name=\"total\"\n          id=\"total\"\n          value={total}\n          onChange={onTotalChange}\n        />\n      </label>\n\n      <hr />\n\n      <label htmlFor=\"pagesRange\">\n        Choose available items per page:\n        <select\n          name=\"pagesRange\"\n          id=\"pagesRange\"\n          onChange={onPerPageChange}\n          defaultValue={perPage}\n        >\n          {perPageRange.map(item => (\n            <option\n              key={item}\n              value={item}\n            >\n              {item}\n            </option>\n          ))}\n        </select>\n      </label>\n\n      <hr />\n      {`count of pages: ${lastPage}`}\n      <hr />\n      <span>\n        {`Available on page: ${fromItem()} - ${toItem()} of ${total} items.`}\n      </span>\n      <hr />\n      {`total: ${total}`}\n      <br />\n      {`perPage: ${perPage}`}\n      <br />\n      {isFirtsPage && (\n        <div>{`prevPage: ${previousPage}`}</div>\n      )}\n      {`page: ${page}`}\n      <br />\n      {isLastPage && (\n        <div>{`nextPage: ${nextPage}`}</div>\n      )}\n      {`queryParams: ?page=${page}&perPage=${perPage}`}\n    </>\n  );\n};\n","import React from 'react';\nimport { Pagination } from './Pagination';\nimport './App.scss';\n\nconst App: React.FC = () => (\n  <>\n    <h1>Pagination</h1>\n    <Pagination />\n  </>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}